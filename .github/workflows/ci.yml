name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:  # Allow manual trigger

jobs:
  lint:
    name: Lint with Ruff
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff

      - name: Run Ruff linter
        run: |
          ruff check . --output-format=github
        continue-on-error: false

      - name: Run Ruff formatter check
        run: |
          ruff format --check .
        continue-on-error: false

  typecheck:
    name: Type Check with MyPy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install mypy types-python-dateutil

      - name: Run MyPy
        run: |
          mypy --config-file pyproject.toml . || true
        continue-on-error: true  # Type checking is informational for now

  test:
    name: Run Tests with Pytest
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.12']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Create test environment file
        run: |
          echo "API_KEY=test_api_key_for_ci" > .env
          echo "API_SECRET=test_api_secret_for_ci" >> .env
          echo "TELEGRAM_ENABLED=0" >> .env

      - name: Run pytest
        run: |
          pytest tests/ -v --tb=short || echo "No tests found or tests failed"
        continue-on-error: true  # Tests are informational for now

      - name: Generate coverage report
        if: always()
        run: |
          pytest tests/ --cov=. --cov-report=xml --cov-report=term || echo "Coverage not available"
        continue-on-error: true

      - name: Upload coverage to artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml
        continue-on-error: true

  security:
    name: Security Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Check for secrets in code
        run: |
          # Check for common secret patterns
          ! grep -r "api_key\s*=\s*['\"][^'\"]\{20,\}" --include="*.py" . || (echo "Found hardcoded API keys!" && exit 1)
          ! grep -r "password\s*=\s*['\"][^'\"]\{8,\}" --include="*.py" . || (echo "Found hardcoded passwords!" && exit 1)
        continue-on-error: false

      - name: Check for .env file committed
        run: |
          if [ -f .env ]; then
            echo "ERROR: .env file found in repository!"
            exit 1
          fi
          echo "✓ No .env file in repository"

  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [lint, typecheck, test, security]
    if: always()
    steps:
      - name: Check CI status
        run: |
          echo "CI Pipeline Summary:"
          echo "===================="
          echo "Lint: ${{ needs.lint.result }}"
          echo "Type Check: ${{ needs.typecheck.result }}"
          echo "Tests: ${{ needs.test.result }}"
          echo "Security: ${{ needs.security.result }}"
          
          if [ "${{ needs.lint.result }}" != "success" ] || [ "${{ needs.security.result }}" != "success" ]; then
            echo ""
            echo "❌ CI FAILED - Lint or security checks failed"
            exit 1
          fi
          
          echo ""
          echo "✅ CI PASSED - Core checks successful"
